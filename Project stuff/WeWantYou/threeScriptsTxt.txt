newestLogin.py

code set to .setStyleSheet is CSS code for display"""
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from Main import DataEntryForm, MainWindow
###from userLOGIN import *

# creates Main window to pass container object into
class Ui_MainWindow(object):
    def __init__(self, mainWindow):
        self.mainWindow = mainWindow
        

    #adds each object from .Ui file setup from Qtdesigner program
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(424, 525)
        MainWindow.setStyleSheet("border-radius{15px}")
        
        #Could break without, not to sure if its needed...
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")

        #inner container that holds all objects
        self.containerThing = QtWidgets.QWidget(self.centralwidget)
        self.containerThing.setGeometry(QtCore.QRect(0, 0, 431, 531))
        self.containerThing.setStyleSheet("")
        self.containerThing.setObjectName("containerThing")

        #background that hass CSS for yellow effect
        self.label_2 = QtWidgets.QLabel(self.containerThing)
        self.label_2.setGeometry(QtCore.QRect(0, 0, 430, 530))
        self.label_2.setStyleSheet("background-color:qconicalgradient(cx:0, cy:0, angle:135,\n"
                                "stop:0 rgba(255, 255, 0, 69), stop:0.375 rgba(255, 255, 0, 69),\n"
                                "stop:0.423533 rgba(251, 255, 0, 145), stop:0.45 rgba(247, 255, 0, 208),\n"
                                "stop:0.477581 rgba(255, 244, 71, 130), stop:0.518717 rgba(255, 218, 71, 130),\n"
                                "stop:0.55 rgba(255, 255, 0, 255), stop:0.57754 rgba(255, 203, 0, 130), stop:0.625 rgba(255, 255, 0, 69),\n"
                                "stop:1 rgba(255, 255, 0, 69));\n"
                                "border-radius:15px;")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")

        # displays the "Login" text
        self.LoginLabel = QtWidgets.QLabel(self.containerThing)
        self.LoginLabel.setGeometry(QtCore.QRect(160, 40, 111, 40))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(20)
        font.setBold(True)
        font.setUnderline(True)
        self.LoginLabel.setFont(font)
        self.LoginLabel.setStyleSheet("color:rgba(9,9,9,1);")
        self.LoginLabel.setObjectName("LoginLabel")

        # -------------------------------------------------------------------------------user input for "GuiUserName"... Need to get info for login
        self.GuiUserName = QtWidgets.QLineEdit(self.containerThing)
        self.GuiUserName.setGeometry(QtCore.QRect(120, 100, 200, 40))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(20)
        font.setBold(False)
        self.GuiUserName.setFont(font)
        self.GuiUserName.setStyleSheet("background-color:rgba(0,0,0,0);\n"
                                        "border:none;\n"
                                        "border-bottom:2px solid rgba(105,118,132,255);\n"
                                        "color:rgba(9,9,9,1);\n"
                                        "padding-bottom:7px;")
        self.GuiUserName.setObjectName("GuiUserName")

        #---------------------------------------------------------------------------------user input for "GuiUserPassword ... Need to get info for login
        self.GuiUserPassword = QtWidgets.QLineEdit(self.containerThing)
        self.GuiUserPassword.setGeometry(QtCore.QRect(120, 160, 200, 40))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(20)
        font.setBold(False)
        self.GuiUserPassword.setFont(font)
        self.GuiUserPassword.setStyleSheet("background-color:rgba(0,0,0,0);\n"
                                                "border:none;\n"
                                                "border-bottom:2px solid rgba(105,118,132,255);\n"
                                                "color:rgba(9,9,9,1);\n"
                                                "padding-bottom:7px;")
        self.GuiUserPassword.setEchoMode(QtWidgets.QLineEdit.Password)
        self.GuiUserPassword.setObjectName("GuiUserPassword")

        #---------------------------------------------------------------------------------login button.. need linked button to function for user authentication
        self.Login_Button = QtWidgets.QPushButton(self.containerThing)
        self.Login_Button.setEnabled(True)
        self.Login_Button.setGeometry(QtCore.QRect(120, 230, 200, 40))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        font.setBold(False)
        self.Login_Button.setFont(font)
        self.Login_Button.setStyleSheet("Login_Button#pushButton{\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255),\n"
                                        "stop:1 rgba(255, 255, 255, 255)); \n"
                                        "color:rgba(255,255,255,210);\n"
                                        "border-radius:5px;\n"
                                        "}\n"
                                        "\n"
                                        "Login_Button#pushButton:hover{\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255)); \n"
                                        "\n"
                                        "}\n"
                                        "Login_Button#pushButton:pressed{\n"
                                        "padding-left:5px;\n"
                                        "padding-top:5px;\n"
                                        "background-color:rgba(9,9,9,1)\n"
                                        "}")
        self.Login_Button.setObjectName("Login_Button")
        




        #label text for "New User"
        self.NewAccountLabel = QtWidgets.QLabel(self.containerThing)
        self.NewAccountLabel.setGeometry(QtCore.QRect(110, 300, 301, 40))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(18)
        font.setBold(True)
        font.setUnderline(True)
        self.NewAccountLabel.setFont(font)
        self.NewAccountLabel.setStyleSheet("color:rgba(9,9,9,1);")
        self.NewAccountLabel.setObjectName("NewAccountLabel")

        #-------------------------------------------------------------------------------------- Feild for "GuiNewUserName"... Need to get info for login Reg new user
        self.GuiNewUserName = QtWidgets.QLineEdit(self.containerThing)
        self.GuiNewUserName.setGeometry(QtCore.QRect(120, 360, 200, 40))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(20)
        font.setBold(False)
        self.GuiNewUserName.setFont(font)
        self.GuiNewUserName.setStyleSheet("background-color:rgba(0,0,0,0);\n"
                                                "border:none;\n"
                                                "border-bottom:2px solid rgba(105,118,132,255);\n"
                                                "color:rgba(9,9,9,1);\n"
                                                "padding-bottom:7px;")
        self.GuiNewUserName.setObjectName("GuiNewUserName")

        #------------------------------------------------------------------------------ Feild for "GuiNewUserPassword" ... Need to get info for login Reg new user pword
        self.GuiNewUserPassword = QtWidgets.QLineEdit(self.containerThing)
        self.GuiNewUserPassword.setGeometry(QtCore.QRect(120, 420, 200, 40))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(20)
        font.setBold(False)
        self.GuiNewUserPassword.setFont(font)
        self.GuiNewUserPassword.setStyleSheet("background-color:rgba(0,0,0,0);\n"
                                                "border:none;\n"
                                                "border-bottom:2px solid rgba(105,118,132,255);\n"
                                                "color:rgba(9,9,9,1);\n"
                                                "padding-bottom:7px;")
        self.GuiNewUserPassword.setEchoMode(QtWidgets.QLineEdit.Password)
        self.GuiNewUserPassword.setObjectName("GuiNewUserPassword")

        #---------------------------------------------------------------------------------------------button for creating new user... need function from login 
        self.CreateNewAccButton = QtWidgets.QPushButton(self.containerThing)
        self.CreateNewAccButton.setEnabled(True)
        self.CreateNewAccButton.setGeometry(QtCore.QRect(90, 480, 251, 40))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(12)
        font.setBold(False)
        self.CreateNewAccButton.setFont(font)
        self.CreateNewAccButton.setStyleSheet("Login_Button#pushButton{\n"
                                                " background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255),\n"
                                                "stop:1 rgba(255, 255, 255, 255)); \n"
                                                "color:rgba(255,255,255,210);\n"
                                                "border-radius:5px;\n"
                                                "}\n"
                                                "\n"
                                                "Login_Button#pushButton:hover{\n"
                                                "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255),\n"
                                                "stop:1 rgba(255, 255, 255, 255)); \n"
                                                "\n"
                                                "}\n"
                                                "Login_Button#pushButton:pressed{\n"
                                                "    padding-left:5px;\n"
                                                "    padding-top:5px;\n"
                                                "    background-color:rgba(9,9,9,1)\n"
                                                "}")
        self.CreateNewAccButton.setObjectName("CreateNewAccButton")


        self.label_2.raise_()
        self.LoginLabel.raise_()
        self.GuiUserName.raise_()
        self.GuiUserPassword.raise_()
        self.NewAccountLabel.raise_()
        self.GuiNewUserName.raise_()
        self.GuiNewUserPassword.raise_()
        self.Login_Button.raise_()
        self.CreateNewAccButton.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #translation from .Ui file created from Qtdesigner
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PFT Login"))
        self.LoginLabel.setText(_translate("MainWindow", "Login"))
        self.GuiUserName.setPlaceholderText(_translate("MainWindow", "User Name"))
        self.GuiUserPassword.setPlaceholderText(_translate("MainWindow", "Password"))
        self.Login_Button.setText(_translate("MainWindow", "L o g i n"))
        self.NewAccountLabel.setText(_translate("MainWindow", "New Account"))
        self.GuiNewUserName.setPlaceholderText(_translate("MainWindow", "User Name"))
        self.GuiNewUserPassword.setPlaceholderText(_translate("MainWindow", "Password"))
        self.CreateNewAccButton.setText(_translate("MainWindow", "Create New Account"))

       
#----------------------------------------------------------------------------------------------Buttons connected to functions
        self.Login_Button.clicked.connect(self.getUserInfo)
        self.CreateNewAccButton.clicked.connect(self.getNewUserInfo)
 
    def getUserInfo(self):
        userName = self.GuiUserName.text()
        userPassword = self.GuiUserPassword.text()
        print(userName,userPassword)                       
        userLogin(userName, userPassword)
        


    def getNewUserInfo(self):
        NewUserName = self.GuiNewUserName.text()
        NewUserPassword = self.GuiNewUserPassword.text()
        print(NewUserName,NewUserPassword)        
        Register(NewUserName,NewUserPassword)





if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    w = DataEntryForm()
    mainWindow = MainWindow(w)
    ex = Ui_MainWindow(mainWindow)
    w = QtWidgets.QMainWindow()
    ex.setupUi(w)
    w.show()
    sys.exit(app.exec_())
-------------------------------------------------------------------------------------------

userLOGIN.py

import hashlib #importing hashing
from PyQt5 import QtWidgets
from Main import DataEntryForm as dataform
from Main import MainWindow as mw
from Newestlogin import Ui_MainWindow as uimw

#user class to define username and pw
class User():
    def init(self, userName, userPassword):
        self.userName = userName
        #hashing the pw / used sha256 algorithm to has because it is supported by all systems
        #.encode turns pw to bytes and hexdigest turns the bytes to a hexadecimal number
        self.userPassword =hashlib.sha256(userPassword.encode()).hexdigest()

#function for user registration
def Register(NewUserName, NewUserPassword):
    userName = NewUserName
    userPassword = NewUserPassword
    #checking if username is already in use
    with open("register.txt", "r") as file:
        for name in file:
            if userName in name:
                QtWidgets.QMessageBox.warning(None, 'Error', 'Username already exists')
                return
    #writing the username and pw to file
    with open("register.txt", "a") as file: #"a"=append credentials to end of text file
        file.write(userName + '/' + hashlib.sha256(userPassword.encode()).hexdigest() + "\n")

    QtWidgets.QMessageBox.information(None, 'Congratulations!', 'Registration Successful')

#function for user login
def userLogin(userName, userPassword): #, dataform, uimw

    print('in login function')#testing purpose
    userName = userName
    userPassword = userPassword
    login_successful = False
    #reading file for username and pw and if it matches they login if not says failed.
    with open("register.txt", "r") as file:
        lines = file.readlines()
        for line in lines:
            items = line.strip().split('/')           
             #checking if username matches what is stored in file and if the hashed pw matches           
            if items[0] == userName and items[1] == hashlib.sha256(userPassword.encode()).hexdigest():
                    login_successful = True
                    break
    if login_successful:
        print('login successful')
        QtWidgets.QMessageBox.information(None, 'Welcome', 'Login Successful!')
        print('Before showing main') #testing purpose
        
        
        z = mw(dataform)
        z.show()

        # x = dataform()
        # x.show()
        
        
        # y = uimw()
        # y.uimw.hide()

        print('main shown') #testin purpose                
        #uimw.mainWindow.close() #not working!!!!!!!
        print('login window closed')#testing purpose       
        

    else:
        print('not successful') #testing purpose
        QtWidgets.QMessageBox.warning(None, 'Error', 'Invalid Login')
------------------------------------------------------------------------------------------------------

Main.py

import sys
import csv
from PyQt5.QtWidgets import (QApplication, QWidget, QMainWindow, QPushButton, QAction, QHeaderView, QLineEdit, QLabel, QTableWidget, QTableWidgetItem, QVBoxLayout, QHBoxLayout)
from PyQt5.QtGui import QPainter, QStandardItemModel, QIcon
from PyQt5.Qt import Qt                                            
from PyQt5.QtChart import QChart, QChartView, QPieSeries
#from cryptography.fernet import Fernet         


class DataEntryForm(QWidget):            #adding views to the main window object
    def __init__(self):
        super().__init__()

        #checks how many items are in the table
        self.items = 0

        #dummy data set for examples, dictionary
        self._data = {"Double click a description or price to edit": 0.0, "Gas": 30.0, "rent": 1850.0, "Car Payment": 420.0, 
                      "Entertainment": 105.0, "Public Transport": 60.0, "Coffee":90.5}

        #left side of the app screen setup, 2 columns, header names Description and Price
        self.table = QTableWidget()
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(("Description", "Price"))
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch) #auto exapnd column width

        #create layout object
        self.layoutRight = QVBoxLayout()

        # set chart widget using a render method in Qpainter for better resolution
        self.chartView = QChartView()                         
        self.chartView.setRenderHint(QPainter.Antialiasing)
        

        #create widgets options for container (input lines for description and price Add Clear Quit Plot buttons)
        self.LineEditDescription = QLineEdit()
        self.lineEditPrice = QLineEdit()
        self.buttonAdd = QPushButton("Add")
        self.buttonClear = QPushButton("Clear")
        self.buttonQuit = QPushButton("Quit")
        self.buttonPlot = QPushButton("Plot")

        #add button requires input to trigger
        self.buttonAdd.setEnabled(False)

        #add widgets to layout container (laid out in order of apperence)
        self.layoutRight.setSpacing(10)
        self.layoutRight.addWidget(QLabel("Description"))
        self.layoutRight.addWidget(self.LineEditDescription)
        self.layoutRight.addWidget(QLabel("Price"))
        self.layoutRight.addWidget(self.lineEditPrice)
        self.layoutRight.addWidget(self.buttonAdd)
        self.layoutRight.addWidget(self.buttonPlot)
        self.layoutRight.addWidget(self.chartView)     
        self.layoutRight.addWidget(self.buttonClear)
        self.layoutRight.addWidget(self.buttonQuit)

        #create layout object for with 50% of screen used
        self.layout = QHBoxLayout()    
        self.layout.addWidget(self.table, 50)
        self.layout.addLayout(self.layoutRight, 50)

#creates layout object for buttons to sit in, connects buttons to functions
        self.setLayout(self.layout)
        self.buttonQuit.clicked.connect(lambda:app.quit())
        self.buttonClear.clicked.connect(self.reset_table)
        self.buttonPlot.clicked.connect(self.graph_chart)          
        self.buttonAdd.clicked.connect(self.add_entry)

#connects input fields, specifices string and adds functions
        self.LineEditDescription.textChanged[str].connect(self.check_disable)
        self.lineEditPrice.textChanged[str].connect(self.check_disable)

        #popluat fill records in table widget
        self.fill_table()

    #populate the dummy data if there is no data present to display, 
    def fill_table(self, data=None):
        data = self._data if not data else data                      #if there is data this will load it instead

        #formating for display
        for desc, price in data.items():
            descItem = QTableWidgetItem(desc)
            priceItem = QTableWidgetItem('${0:.2f}'.format(price))
            priceItem.setTextAlignment(Qt.AlignRight | Qt.AlignCenter)      

            #update counter self.items and add new row index
            self.table.insertRow(self.items)
            self.table.setItem(self.items, 0, descItem)
            self.table.setItem(self.items, 1, priceItem)
            self.items += 1

#Gets description and price from user input feild, adds to the table then clears the line, ValueError checked for input verification price must be int/float
    def add_entry(self):
        desc = self.LineEditDescription.text()
        price = self.lineEditPrice.text()

        try: 
            descItem = QTableWidgetItem(desc)
            priceItem = QTableWidgetItem('${0:.2f}'.format(float(price)))
            priceItem.setTextAlignment(Qt.AlignRight | Qt.AlignCenter)       

            self.table.insertRow(self.items)
            self.table.setItem(self.items, 0, descItem)
            self.table.setItem(self.items, 1, priceItem)
            self.items += 1
        except ValueError:
            pass

#empty strings to clear the input after adding
        self.LineEditDescription.setText("")
        self.lineEditPrice.setText("")

#checks of there are values in input, enabling or disabeling the add button updating the boolean value
    def check_disable(self):
        if self.LineEditDescription.text() and self.lineEditPrice.text():
            self.buttonAdd.setEnabled(True)
        else:
            self.buttonAdd.setEnabled(False)

#clears the chart
    def reset_table(self):
        self.table.setRowCount(0)
        self.items = 0

        chart = QChart()                       
        self.chartView.setChart(chart)

#creates pie chart with QpieSeries
    def graph_chart(self):                   
        series = QPieSeries()
#populates table row data converts strings to floats updates $ to blank space
        for i in range(self.table.rowCount()):
            text = self.table.item(i, 0).text()
            val = float(self.table.item(i,1).text().replace("$", ''))
            series.append(text, val)
#adds for loop info into chart
        chart = QChart()
        chart.addSeries(series)
        chart.legend().setAlignment(Qt.AlignTop)
        self.chartView.setChart(chart)





class MainWindow(QMainWindow):                                                                         #application main interface class
    def __init__(self, w):
        super().__init__()
        print('Initializing mainwindow')                                                                             #inheirt 
        self.setWindowTitle('Expense Data Entry Form')                                                 #window title
        #self.setWindowIcon(QIcon(r'C:\Users\peglo\OneDrive\SDEV220\Project stuff\financial_icon.png')) #set file path for icon png file, needs to adjust once file uplaod
        self.resize(1200,600)                                                                          #size of window

        self.menuBar = self.menuBar()                                                                  #set menu bar 
        self.fileMenu = self.menuBar.addMenu('File')                                                   #set menu bar name

        #export to CSV file action in menu bar, linking function "export_to_csv"
        exportAction = QAction("Export to CSV", self)
        exportAction.setShortcut('Ctrl+E')
        exportAction.triggered.connect(self.export_to_csv)            

        #exit action in menu bar
        exitAction = QAction('Exit',self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.triggered.connect(lambda:app.quit())

        #addd to the file menu actions
        self.fileMenu.addAction(exportAction)
        self.fileMenu.addAction(exitAction)

        #pass the widget object to mainwindow
        self.setCentralWidget(w) 



#---------------------------------------------New process to encrypt CSV file----- NOT FINISHED----
    # def encryptCSV():
    #     #key generation
    #     key = Fernet.generate_key()

    #     # string the key in a file
    #     with open('filekey.key','wb') as filekey:
    #         filekey.write(key)

    #     #opening the key
    #     with open('filekey.key', 'rb') as filekey:
    #         key = filekey.read()
        
    #     with open ('Expense Report.csv', 'rb') as file:
    #         original = file.read()

    #     encrypted = Fernet.encrypt(original)

    #     with open ('Expense Report.csv', 'wb') as encrypted_file:
    #         encrypted_file.write(encrypted)

    

#---------------------------------------------New process to encrypt CSV file----- NOT FINISHED----







    #function to export CSV file, using csv module, file saved as Expense Report.csv, file opened and closed.
    def export_to_csv(self):
        try:
            with open('Expense Report.csv','w', newline='' ) as file:
                writer = csv.writer(file)
                writer.writerow((w.table.horizontalHeaderItem(0).text(), w.table.horizontalHeaderItem(1).text()))
                for rowNumber in range(w.table.rowCount()):
                    writer.writerow([w.table.item(rowNumber, 0).text(), w.table.item(rowNumber, 1).text()])

                print('CSV file exported')
                file.close()
        except Exception as e:
            print(e)
    


if __name__ == "__main__":
    app = QApplication(sys.argv)
    w = DataEntryForm()
    main = MainWindow(w)
    main.show()

    sys.exit(app.exec_())